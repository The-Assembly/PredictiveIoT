#! /bin/sh
### BEGIN INIT INFO
# Provides:          luaScriptResource
# Required-Start:    $network $syslog
# Required-Stop:     $metwork $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: ThingWorx Lua Script Resource
# Description:       This file should be created using the ThingWorx 
#                    installer and should placed in /etc/init.d.
### END INIT INFO

# Author: ThingWorx  <dev@thingworx.com>
#

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/bin:
DESC="ThingWorx Lua Script Resource"
NAME=luaScriptResource
DAEMON=___LSR_INSTALL_DIR___/$NAME
DAEMON_ARGS="-cfg ___LSR_INSTALL_DIR___/etc/config.lua -service"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAMEd

# Set up our Load Library Path
 export LD_LIBRARY_PATH=___LSR_INSTALL_DIR___/etc/custom/clibs:___LSR_INSTALL_DIR___/etc/thingworx/clibs

# Exit if the package is not installed
#[ -x "$DAEMON" ] || exit 0
if [ ! -x "$DAEMON" ]; then echo $DAEMON is not executable; exit 0; fi

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
[ -r /lib/init/vars.h ] && . /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
[ -r /lib/lsb/init-functions ] && . /lib/lsb/init-functions

MACHINE=$(uname -m)

#Turn off alignment warnings
if [ "$MACHINE" = "armv5tejl" ]; then
echo 2 > /proc/cpu/alignment
fi

LOG_DAEMON_MSG=/usr/bin/logger
LOG_END_MSG=/usr/bin/logger

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon -K --quiet --exec $DAEMON --test
	if [ "$?" = "0" ]; then
	  return 1
	fi  
	start-stop-daemon -S --quiet --pidfile $PIDFILE --exec $DAEMON -- \
		$DAEMON_ARGS \
		|| return 2
	return 0	
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && $LOG_DAEMON_MSG "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && $LOG_END_MSG 0 ;;
		2) [ "$VERBOSE" != no ] && $LOG_END_MSG 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && $LOG_DAEMON_MSG "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && $LOG_END_MSG 0 ;;
		2) [ "$VERBOSE" != no ] && $LOG_END_MSG 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#$LOG_DAEMON_MSG "Reloading $DESC" "$NAME"
	#do_reload
	#$LOG_END_MSG $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	$LOG_DAEMON_MSG "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) $LOG_END_MSG 0 ;;
			1) $LOG_END_MSG 1 ;; # Old process is still running
			*) $LOG_END_MSG 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		$LOG_END_MSG 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
